<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!--
        通过jdbc这个模块为我们做了以下几件事
        tomcat-jdbc－{version}.jar为我们自动配置DataSource.
        如果你没有定义任何DataSource，SpringBoot将会自动配置一个内存的数据库资源设置
        如果没有设置任一个beans，SpringBoot会自动注册它
        初始化数据库
        如果我们在classpath里定义了schema.sql和data.sql文件，springBoot将会使用这些文件自动初始化数据库(但你必须选建库)
        除了载入schema.sql和data.sql外，SpringBoot也会载入schema-${platform}.sql和data-${platform}.sql，如果在你的classpath下存在的话。
        spring.datasource.schema=xxxx-db.sql 可以定义你的建库文件
        spring.datasource.data=xxxx-data.sql  可以定义你的数据文件
        spring.datasource.initialize＝true|false 可以决定是不是要初始化这些数据库文件
        spring.datasource.continueOnError＝true|false 有了错误是否继续运行
        -->

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.46</version>
		</dependency>

        <!-- 读写Excel文件 -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.17</version>
		</dependency>

        <!-- 解析或者生成Xml文件 -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>

        <!-- 连接池 -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>2.6.1</version>
        </dependency>
	</dependencies>

	<build>
		<finalName>demo</finalName>

		<plugins>

            <!-- springboot maven插件  项目以maven方式进行打包jar/war -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.0.3.RELEASE</version>
				<executions>
					<execution>
						<goals>
                            <!-- 默认打包参数,在mvn package之后,再次打包可执行的jar/war -->
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.21.0</version>
				<configuration>
                    <!-- 测试代码出错不影响项目的编译 -->
					<testFailureIgnore>true</testFailureIgnore>
				</configuration>
			</plugin>

			<!-- For Angular -->
			<!-- Plugin to execute command "npm install" and "ng build" inside /angular directory -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<id>exec-npm-install</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
							<workingDirectory>${project.basedir}/../angular</workingDirectory>
						</configuration>
					</execution>

					<execution>
						<id>exec-npm-run-build</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<!-- <executable>npm</executable>
							<arguments>
								<argument>run</argument>
								<argument>build</argument>
							</arguments> -->
                            <executable>ng</executable>
                            <arguments>build</arguments>
							<workingDirectory>${project.basedir}/../angular</workingDirectory>
						</configuration>
					</execution>

				</executions>
			</plugin>

		</plugins>
	</build>

</project>
